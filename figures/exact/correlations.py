from xsil import load_means, AttrDict
import numpy

def processData(fname):
	data = load_means(fname)

	# autogenerated:
	exp_ca2a1 = data.alpha1_calpha2

	d_theta = numpy.pi / 2 - numpy.angle(exp_ca2a1)

	exp_jAY = numpy.real((1j * float(-1) / 2) * numpy.exp(-1j * d_theta) * data.calpha1_alpha2 + \
		(1j * float(1) / 2) * numpy.exp(1j * d_theta) * data.alpha1_calpha2)
	var_jAZ_jAX = numpy.real((float(1) / 4) * numpy.exp(-1j * d_theta) * data.calpha1_alpha1 * data.calpha1_alpha2 + \
		(float(1) / 4) * numpy.exp(-1j * d_theta) * data.calpha1_calpha2_alpha2_2 + \
		(float(-1) / 4) * numpy.exp(-1j * d_theta) * data.calpha1_alpha2 * data.calpha2_alpha2 + \
		(float(-1) / 4) * numpy.exp(-1j * d_theta) * data.calpha1_2_alpha1_alpha2 + \
		(float(1) / 4) * numpy.exp(1j * d_theta) * data.calpha1_alpha1 * data.alpha1_calpha2 + \
		(float(-1) / 4) * numpy.exp(1j * d_theta) * data.calpha1_alpha1_2_calpha2 + \
		(float(-1) / 4) * numpy.exp(1j * d_theta) * data.alpha1_calpha2 * data.calpha2_alpha2 + \
		(float(1) / 4) * numpy.exp(1j * d_theta) * data.alpha1_calpha2_2_alpha2)
	d2_jAZ = numpy.real((float(-1) / 8) + \
		(float(1) / 2) * data.calpha1_alpha1 * data.calpha2_alpha2 + \
		(float(-1) / 4) * data.calpha1_alpha1 ** 2 + \
		(float(-1) / 2) * data.calpha1_alpha1_calpha2_alpha2 + \
		(float(1) / 4) * data.calpha1_2_alpha1_2 + \
		(float(-1) / 4) * data.calpha2_alpha2 ** 2 + \
		(float(1) / 4) * data.calpha2_2_alpha2_2)
	d2_jAX = numpy.real((float(-1) / 8) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * data.calpha1_alpha1_calpha2_alpha2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * data.calpha1_alpha2 * data.alpha1_calpha2 + \
		(float(-1) / 4) * numpy.exp(-1j * d_theta) ** 2 * data.calpha1_alpha2 ** 2 + \
		(float(1) / 4) * numpy.exp(-1j * d_theta) ** 2 * data.calpha1_2_alpha2_2 + \
		(float(-1) / 4) * numpy.exp(1j * d_theta) ** 2 * data.alpha1_calpha2 ** 2 + \
		(float(1) / 4) * numpy.exp(1j * d_theta) ** 2 * data.alpha1_2_calpha2_2)
	d2_jAT = lambda theta: numpy.real((float(-1) / 8) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha1_calpha2_alpha2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.alpha1_calpha2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.calpha1_alpha2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_calpha2_alpha2_2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.calpha2_alpha2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_2_alpha1_alpha2 + \
		(float(-1) / 4) * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2 ** 2 + \
		(float(1) / 4) * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_2_alpha2_2 + \
		(float(1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.alpha1_calpha2 + \
		(float(-1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_2_calpha2 + \
		(float(-1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.calpha2_alpha2 + \
		(float(1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_2_alpha2 + \
		(float(-1) / 4) * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2 ** 2 + \
		(float(1) / 4) * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_2_calpha2_2 + \
		(float(-1) / 8) * numpy.cos(theta) ** 2 + \
		(float(1) / 2) * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.calpha2_alpha2 + \
		(float(-1) / 4) * numpy.cos(theta) ** 2 * data.calpha1_alpha1 ** 2 + \
		(float(-1) / 2) * numpy.cos(theta) ** 2 * data.calpha1_alpha1_calpha2_alpha2 + \
		(float(1) / 4) * numpy.cos(theta) ** 2 * data.calpha1_2_alpha1_2 + \
		(float(-1) / 4) * numpy.cos(theta) ** 2 * data.calpha2_alpha2 ** 2 + \
		(float(1) / 4) * numpy.cos(theta) ** 2 * data.calpha2_2_alpha2_2)
	d2_jBT = lambda theta: numpy.real((float(-1) / 8) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.cbeta1_beta2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta1 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_cbeta2_beta2_2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta2 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_2_beta1_beta2 + \
		(float(-1) / 4) * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.cbeta1_beta2 ** 2 + \
		(float(1) / 4) * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.cbeta1_2_beta2_2 + \
		(float(1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta1 * data.beta1_cbeta2 + \
		(float(-1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta1_2_cbeta2 + \
		(float(-1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.beta1_cbeta2 * data.cbeta2_beta2 + \
		(float(1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.beta1_cbeta2_2_beta2 + \
		(float(-1) / 4) * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.beta1_cbeta2 ** 2 + \
		(float(1) / 4) * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.beta1_2_cbeta2_2 + \
		(float(-1) / 8) * numpy.cos(theta) ** 2 + \
		(float(1) / 2) * numpy.cos(theta) ** 2 * data.cbeta1_beta1 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.cos(theta) ** 2 * data.cbeta1_beta1 ** 2 + \
		(float(-1) / 2) * numpy.cos(theta) ** 2 * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(1) / 4) * numpy.cos(theta) ** 2 * data.cbeta1_2_beta1_2 + \
		(float(-1) / 4) * numpy.cos(theta) ** 2 * data.cbeta2_beta2 ** 2 + \
		(float(1) / 4) * numpy.cos(theta) ** 2 * data.cbeta2_2_beta2_2)
	var_jATjBT = lambda theta: numpy.real((float(-1) / 4) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.beta1_cbeta2 + \
		(float(1) / 4) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2_beta1_cbeta2 + \
		(float(-1) / 4) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.cbeta1_beta2 + \
		(float(1) / 4) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_calpha2_cbeta1_beta2 + \
		(float(1) / 4) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.cbeta1_beta2 + \
		(float(-1) / 4) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_cbeta1_beta2 + \
		(float(1) / 4) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 4) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2_cbeta1_beta1 + \
		(float(1) / 4) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2_cbeta2_beta2 + \
		(float(-1) / 4) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2 * data.cbeta1_beta2 + \
		(float(1) / 4) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2_cbeta1_beta2 + \
		(float(-1) / 4) * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.cbeta1_beta2 + \
		(float(1) / 4) * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2_cbeta1_beta2 + \
		(float(1) / 4) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.beta1_cbeta2 + \
		(float(-1) / 4) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_beta1_cbeta2 + \
		(float(1) / 4) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.cbeta1_beta1 + \
		(float(-1) / 4) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_cbeta1_beta1 + \
		(float(1) / 4) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_cbeta2_beta2 + \
		(float(-1) / 4) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2 * data.beta1_cbeta2 + \
		(float(1) / 4) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2_beta1_cbeta2 + \
		(float(-1) / 4) * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.beta1_cbeta2 + \
		(float(1) / 4) * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2_beta1_cbeta2 + \
		(float(-1) / 4) * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.cbeta1_beta1 + \
		(float(1) / 4) * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.cbeta2_beta2 + \
		(float(1) / 4) * numpy.cos(theta) ** 2 * data.calpha1_alpha1_cbeta1_beta1 + \
		(float(-1) / 4) * numpy.cos(theta) ** 2 * data.calpha1_alpha1_cbeta2_beta2 + \
		(float(1) / 4) * numpy.cos(theta) ** 2 * data.calpha2_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 4) * numpy.cos(theta) ** 2 * data.calpha2_alpha2 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.cos(theta) ** 2 * data.calpha2_alpha2_cbeta1_beta1 + \
		(float(1) / 4) * numpy.cos(theta) ** 2 * data.calpha2_alpha2_cbeta2_beta2)
	exp_jAY = numpy.real((1j * float(-1) / 2) * numpy.exp(-1j * d_theta) * data.calpha1_alpha2 + \
		(1j * float(1) / 2) * numpy.exp(1j * d_theta) * data.alpha1_calpha2)
	exp_jBY = numpy.real((1j * float(-1) / 2) * numpy.exp(-1j * d_theta) * data.cbeta1_beta2 + \
		(1j * float(1) / 2) * numpy.exp(1j * d_theta) * data.beta1_cbeta2)
	d2_jAT_gjBT = lambda theta, g: numpy.real((float(-1) / 8) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.calpha1_alpha2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.calpha1_alpha2_beta1_cbeta2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.alpha1_calpha2 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.alpha1_calpha2_cbeta1_beta2 + \
		(float(-1) / 8) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.cbeta1_beta2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha1_calpha2_alpha2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.alpha1_calpha2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha1 * data.cbeta1_beta2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha1_cbeta1_beta2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha2 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha2_cbeta1_beta1 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha2_cbeta2_beta2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha2_alpha2 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha2_alpha2_cbeta1_beta2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.cbeta1_beta1 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.cbeta1_cbeta2_beta2_2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.cbeta1_beta2 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.cbeta1_2_beta1_beta2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.calpha1_alpha2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_calpha2_alpha2_2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.calpha2_alpha2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_2_alpha1_alpha2 + \
		(float(-1) / 2) * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.calpha1_alpha2 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.calpha1_alpha2_cbeta1_beta2 + \
		(float(-1) / 4) * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.cbeta1_beta2 ** 2 + \
		(float(1) / 4) * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.cbeta1_2_beta2_2 + \
		(float(-1) / 4) * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2 ** 2 + \
		(float(1) / 4) * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_2_alpha2_2 + \
		(float(1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha1 * data.beta1_cbeta2 + \
		(float(-1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha1_beta1_cbeta2 + \
		(float(1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_calpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_calpha2 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_calpha2_cbeta1_beta1 + \
		(float(1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_calpha2_cbeta2_beta2 + \
		(float(-1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha2_alpha2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha2_alpha2_beta1_cbeta2 + \
		(float(1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.cbeta1_beta1 * data.beta1_cbeta2 + \
		(float(-1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.cbeta1_beta1_2_cbeta2 + \
		(float(-1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.beta1_cbeta2 * data.cbeta2_beta2 + \
		(float(1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.beta1_cbeta2_2_beta2 + \
		(float(1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.alpha1_calpha2 + \
		(float(-1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_2_calpha2 + \
		(float(-1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.calpha2_alpha2 + \
		(float(1) / 2) * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_2_alpha2 + \
		(float(-1) / 2) * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.alpha1_calpha2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.alpha1_calpha2_beta1_cbeta2 + \
		(float(-1) / 4) * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.beta1_cbeta2 ** 2 + \
		(float(1) / 4) * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.beta1_2_cbeta2_2 + \
		(float(-1) / 4) * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2 ** 2 + \
		(float(1) / 4) * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_2_calpha2_2 + \
		(float(-1) / 8) * numpy.cos(theta) ** 2 + \
		(float(-1) / 2) * numpy.cos(theta) ** 2 * g * data.calpha1_alpha1 * data.cbeta1_beta1 + \
		(float(1) / 2) * numpy.cos(theta) ** 2 * g * data.calpha1_alpha1 * data.cbeta2_beta2 + \
		(float(1) / 2) * numpy.cos(theta) ** 2 * g * data.calpha1_alpha1_cbeta1_beta1 + \
		(float(-1) / 2) * numpy.cos(theta) ** 2 * g * data.calpha1_alpha1_cbeta2_beta2 + \
		(float(1) / 2) * numpy.cos(theta) ** 2 * g * data.calpha2_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.cos(theta) ** 2 * g * data.calpha2_alpha2 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.cos(theta) ** 2 * g * data.calpha2_alpha2_cbeta1_beta1 + \
		(float(1) / 2) * numpy.cos(theta) ** 2 * g * data.calpha2_alpha2_cbeta2_beta2 + \
		(float(-1) / 8) * numpy.cos(theta) ** 2 * g ** 2 + \
		(float(1) / 2) * numpy.cos(theta) ** 2 * g ** 2 * data.cbeta1_beta1 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.cos(theta) ** 2 * g ** 2 * data.cbeta1_beta1 ** 2 + \
		(float(-1) / 2) * numpy.cos(theta) ** 2 * g ** 2 * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(1) / 4) * numpy.cos(theta) ** 2 * g ** 2 * data.cbeta1_2_beta1_2 + \
		(float(-1) / 4) * numpy.cos(theta) ** 2 * g ** 2 * data.cbeta2_beta2 ** 2 + \
		(float(1) / 4) * numpy.cos(theta) ** 2 * g ** 2 * data.cbeta2_2_beta2_2 + \
		(float(1) / 2) * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.calpha2_alpha2 + \
		(float(-1) / 4) * numpy.cos(theta) ** 2 * data.calpha1_alpha1 ** 2 + \
		(float(-1) / 2) * numpy.cos(theta) ** 2 * data.calpha1_alpha1_calpha2_alpha2 + \
		(float(1) / 4) * numpy.cos(theta) ** 2 * data.calpha1_2_alpha1_2 + \
		(float(-1) / 4) * numpy.cos(theta) ** 2 * data.calpha2_alpha2 ** 2 + \
		(float(1) / 4) * numpy.cos(theta) ** 2 * data.calpha2_2_alpha2_2)
	d2_jDT = lambda theta: numpy.real((float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha1_calpha2_alpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha1_calpha2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha1_alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha1_cbeta2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_calpha2_alpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_calpha2_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.alpha1_calpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.alpha1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.calpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2_beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_beta1_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.alpha1_calpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.alpha1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.calpha2_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.cbeta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_calpha2_alpha2_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_calpha2_cbeta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_alpha2_cbeta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_cbeta1_cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_cbeta2 * data.alpha2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_cbeta2 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha2_alpha2_cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha2_cbeta1_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha2_beta1 * data.alpha2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha2_beta1 * data.cbeta1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha2_cbeta1 * data.beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha2_cbeta1_beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.cbeta1_beta2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.calpha1_alpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.calpha1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.alpha2_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.cbeta1_beta2 + \
		(1j * float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_alpha2_cbeta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_cbeta1_beta2 + \
		(1j * float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_calpha2_alpha2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_calpha2_alpha2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_calpha2_beta2_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.calpha1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.alpha1_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.calpha2_alpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.calpha2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.cbeta2_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2_cbeta1_beta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2_2_cbeta2 + \
		(1j * float(1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_cbeta1_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.calpha1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.alpha2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.cbeta1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_cbeta2_beta2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.alpha1_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.calpha2_alpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.calpha2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.alpha2_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.cbeta1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_2_alpha1_alpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_2_alpha1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_2_alpha2_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_2_beta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_alpha2_cbeta1_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1 * data.alpha2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1 * data.cbeta1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1_2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2 * data.cbeta1_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2_cbeta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2_2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_cbeta1_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta2 * data.alpha2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta2 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta1 * data.alpha2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta1 * data.cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta1 * data.cbeta2_beta2 + \
		(1j * float(1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta1_cbeta2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta1_2_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta2 * data.cbeta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_2_cbeta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta1 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_cbeta2_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta2 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_2_beta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.calpha1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.cbeta1_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2 ** 2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2_cbeta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2_2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_cbeta1_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.alpha2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.cbeta1_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_beta2 ** 2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_2_alpha2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_2_alpha2_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_2_beta2_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha2_cbeta1 * data.cbeta1_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha2_cbeta1 ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha2_cbeta1_2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha2_2_cbeta1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.cbeta1_beta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.cbeta1_2_beta2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.alpha1_calpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.alpha1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.calpha2_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.beta1_cbeta2 + \
		(1j * float(1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_calpha2_beta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_beta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_2_calpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_calpha2_beta1_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.alpha1_calpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.alpha1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.calpha2_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1_2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.alpha1_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.calpha2_alpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.calpha2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.cbeta2_beta2 + \
		(1j * float(1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_alpha2_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_cbeta1_beta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_2_alpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_alpha2_cbeta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1 * data.alpha1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1 * data.calpha2_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1 * data.beta1_cbeta2 + \
		(1j * float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1_beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2 * data.calpha2_alpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2 * data.calpha2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2 * data.alpha2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2 * data.cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2 * data.cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2_2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_2_calpha2_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_2_cbeta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2 * data.calpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2 * data.beta1_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2_beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_cbeta1_beta1_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta1 * data.calpha2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta1 * data.alpha2_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta1 * data.cbeta1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta1 * data.cbeta2_beta2 + \
		(1j * float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta1_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta2 * data.beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_2_alpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_2_beta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_beta1_cbeta2_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta1 * data.beta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta1_2_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.beta1_cbeta2 * data.cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.beta1_cbeta2_2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.alpha1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.calpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.beta1_cbeta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2 ** 2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2_beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2_2_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_beta1_cbeta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_cbeta2 * data.calpha2_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_cbeta2 * data.beta1_cbeta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_cbeta2 ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_2_calpha2_cbeta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_2_calpha2_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_2_cbeta2_2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha2_beta1 * data.beta1_cbeta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha2_beta1 ** 2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha2_beta1_2_cbeta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha2_2_beta1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.beta1_cbeta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.beta1_2_cbeta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.calpha1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.alpha1_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.calpha2_alpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.calpha2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.alpha2_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.cbeta1_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 ** 2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_calpha2_alpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_calpha2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_alpha2_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_calpha2_alpha2_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_calpha2_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha2_beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_cbeta1_beta1_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.alpha1_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.calpha2_alpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.calpha2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.alpha2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1_cbeta2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_2_alpha1_beta1 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_2_alpha1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_2_beta1_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_calpha2_alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_calpha2_cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_alpha2_cbeta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 * data.calpha2_alpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 * data.calpha2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 * data.alpha2_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 * data.cbeta1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 * data.cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 ** 2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1_2_beta1 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_2_cbeta1_2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2 * data.calpha2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2 * data.alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2 ** 2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2_cbeta1_beta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2_2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_cbeta1_beta1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_cbeta2_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_beta2 * data.alpha2_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_beta2 * data.cbeta1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_beta2 * data.cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_beta2 ** 2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_2_alpha2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_2_alpha2_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_2_beta2_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_cbeta1_beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_cbeta2 * data.cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_cbeta2 * data.cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_cbeta2 ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_cbeta2_2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_2_cbeta2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta1_beta1 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta1_beta1 ** 2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta1_2_beta1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta2_beta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta2_2_beta2_2)
	var_jCTjDT = lambda theta: numpy.real((float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha1_calpha2_alpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha1_cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_calpha2_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.alpha1_calpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2_beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.alpha1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.calpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_calpha2_cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_alpha2_cbeta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_cbeta2 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha2_alpha2_cbeta1_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha2_beta1 * data.alpha2_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.cbeta1_beta2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.calpha1_alpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_calpha2_alpha2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_calpha2_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.calpha2_alpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.calpha1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.alpha1_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.calpha2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.alpha2_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_2_alpha1_alpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_2_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_alpha2_cbeta1_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta2 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta1 * data.alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_2_cbeta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta1 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_cbeta2_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta2 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_2_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.cbeta1_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2 ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.alpha2_cbeta1 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_beta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_2_alpha2_2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_2_beta2_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha2_cbeta1 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha2_2_cbeta1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.cbeta1_beta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.cbeta1_2_beta2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.alpha1_calpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.beta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_2_calpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_calpha2_beta1_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.alpha1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.calpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.calpha2_alpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_2_alpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_alpha2_cbeta2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1 * data.alpha1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1 * data.calpha2_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2 * data.calpha2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2 * data.alpha2_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_2_cbeta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2 * data.beta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta1 * data.calpha2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta1 * data.alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_2_beta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta1 * data.beta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta1_2_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.beta1_cbeta2 * data.cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.beta1_cbeta2_2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.beta1_cbeta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2 ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_cbeta2 * data.calpha2_beta1 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_cbeta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_2_calpha2_2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_2_cbeta2_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha2_beta1 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha2_2_beta1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.beta1_cbeta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.beta1_2_cbeta2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.calpha2_alpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.cbeta1_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 ** 2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_calpha2_alpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_calpha2_beta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha2_beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.alpha1_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.calpha2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.alpha2_cbeta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_2_alpha1_2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_2_beta1_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_calpha2_cbeta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_alpha2_cbeta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 * data.calpha2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 * data.alpha2_cbeta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_2_cbeta1_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2 ** 2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2_cbeta1_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_beta2 * data.alpha2_cbeta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_beta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_2_alpha2_2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_2_beta2_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_cbeta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_2_cbeta2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta1_beta1 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta1_beta1 ** 2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta1_2_beta1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta2_beta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta2_2_beta2_2)
	exp_jCY = numpy.real((1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(-1j * d_theta) * data.calpha1_alpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(-1j * d_theta) * data.calpha1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(-1j * d_theta) * data.alpha2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(-1j * d_theta) * data.cbeta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(1j * d_theta) * data.alpha1_calpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(1j * d_theta) * data.alpha1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(1j * d_theta) * data.calpha2_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(1j * d_theta) * data.beta1_cbeta2)
	exp_jDY = numpy.real((1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(-1j * d_theta) * data.calpha1_alpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(-1j * d_theta) * data.calpha1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(-1j * d_theta) * data.alpha2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(-1j * d_theta) * data.cbeta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(1j * d_theta) * data.alpha1_calpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(1j * d_theta) * data.alpha1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(1j * d_theta) * data.calpha2_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) * numpy.sqrt(0.5) * numpy.exp(1j * d_theta) * data.beta1_cbeta2)
	d2_jCT_gjDT = lambda theta, g: numpy.real((float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.calpha1_alpha1_calpha2_alpha2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.calpha1_alpha1_cbeta2_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.calpha1_calpha2_beta1_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.calpha1_alpha2 * data.alpha1_calpha2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.calpha1_alpha2 * data.beta1_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.calpha1_alpha2_beta1_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.calpha1_beta2 * data.alpha1_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.calpha1_beta2 * data.calpha2_beta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.alpha1_calpha2 * data.cbeta1_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.alpha1_calpha2_cbeta1_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.alpha1_alpha2_cbeta1_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.alpha1_cbeta2 * data.alpha2_cbeta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.calpha2_alpha2_cbeta1_beta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.calpha2_beta1 * data.alpha2_cbeta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g * data.cbeta1_beta2 * data.beta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha1_calpha2_alpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha1_calpha2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha1_alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha1_cbeta2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_calpha2_alpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_calpha2_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha2 * data.alpha1_calpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha2 * data.alpha1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha2 * data.calpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha2_beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_beta1_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_beta2 * data.alpha1_calpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_beta2 * data.alpha1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_beta2 * data.calpha2_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_beta2 * data.beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_calpha2 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_calpha2 * data.cbeta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_calpha2_alpha2_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_calpha2_cbeta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_alpha2_cbeta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_cbeta1_cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_cbeta2 * data.alpha2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_cbeta2 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha2_alpha2_cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha2_cbeta1_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha2_beta1 * data.alpha2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.calpha2_beta1 * data.cbeta1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.alpha2_cbeta1 * data.beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.alpha2_cbeta1_beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * g ** 2 * data.cbeta1_beta2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha1_calpha2_alpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha1_calpha2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha1_alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha1_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_calpha2_alpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_calpha2_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.alpha1_calpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.alpha1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.calpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_alpha2_beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_beta1_cbeta2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.alpha1_calpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.alpha1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.calpha2_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.cbeta1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_calpha2_alpha2_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_calpha2_cbeta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_alpha2_cbeta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_cbeta1_cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_cbeta2 * data.alpha2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha1_cbeta2 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha2_alpha2_cbeta1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha2_cbeta1_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha2_beta1 * data.alpha2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.calpha2_beta1 * data.cbeta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha2_cbeta1 * data.beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.alpha2_cbeta1_beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.exp(1j * d_theta) * numpy.sin(theta) ** 2 * data.cbeta1_beta2 * data.beta1_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha1 * data.calpha1_alpha2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha1 * data.cbeta1_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_calpha2_alpha2_2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_calpha2_beta2_2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha2 * data.calpha2_alpha2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha2 * data.cbeta2_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_beta1 * data.calpha1_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_beta1 * data.alpha2_cbeta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_beta2 * data.alpha1_cbeta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_beta2 * data.calpha2_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_beta2 * data.alpha2_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_2_alpha1_alpha2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_2_beta1_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_alpha2_cbeta1_2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_cbeta1 * data.alpha2_cbeta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha2_alpha2 * data.cbeta1_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha2_beta2 * data.alpha2_cbeta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha2_cbeta1 * data.alpha2_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha2_2_cbeta1_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.cbeta1_beta1 * data.cbeta1_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.cbeta1_cbeta2_beta2_2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.cbeta1_beta2 * data.cbeta2_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.cbeta1_2_beta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1 * data.calpha1_alpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1 * data.calpha1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1 * data.alpha2_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1 * data.cbeta1_beta2 + \
		(1j * float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1_alpha2_cbeta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1_cbeta1_beta2 + \
		(1j * float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_calpha2_alpha2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_calpha2_alpha2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_calpha2_beta2_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha2 * data.calpha1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha2 * data.alpha1_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha2 * data.calpha2_alpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha2 * data.calpha2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha2 * data.alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha2 * data.cbeta2_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha2_cbeta1_beta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha2_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha2_2_cbeta2 + \
		(1j * float(1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_cbeta1_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta1 * data.calpha1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta1 * data.alpha2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta1 * data.cbeta1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_cbeta2_beta2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta2 * data.alpha1_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta2 * data.calpha2_alpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta2 * data.calpha2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta2 * data.alpha2_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta2 * data.cbeta1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta2 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_2_alpha1_alpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_2_alpha1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_2_alpha2_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_2_beta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_alpha2_cbeta1_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_cbeta1 * data.alpha2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_cbeta1 * data.cbeta1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_cbeta1_2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_alpha2 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_alpha2 * data.cbeta1_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_alpha2_cbeta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_alpha2_2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_cbeta1_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_beta2 * data.alpha2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_beta2 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha2_cbeta1 * data.alpha2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha2_cbeta1 * data.cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha2_cbeta1 * data.cbeta2_beta2 + \
		(1j * float(1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha2_cbeta1_cbeta2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha2_cbeta1_2_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha2_cbeta2 * data.cbeta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha2_2_cbeta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.cbeta1_beta1 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.cbeta1_cbeta2_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.cbeta1_beta2 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.cbeta1_2_beta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.calpha1_alpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.calpha1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.alpha2_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.cbeta1_beta2 + \
		(1j * float(1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_alpha2_cbeta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_cbeta1_beta2 + \
		(1j * float(1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_calpha2_alpha2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_calpha2_alpha2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_calpha2_beta2_2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.calpha1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.alpha1_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.calpha2_alpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.calpha2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2 * data.cbeta2_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2_cbeta1_beta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2_cbeta2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha2_2_cbeta2 + \
		(1j * float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_cbeta1_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.calpha1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.alpha2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.cbeta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_cbeta2_beta2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.alpha1_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.calpha2_alpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.calpha2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.alpha2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta2 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_2_alpha1_alpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_2_alpha1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_2_alpha2_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_2_beta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_alpha2_cbeta1_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1 * data.alpha2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1 * data.cbeta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1_2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2 * data.cbeta1_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2_cbeta1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2_2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_cbeta1_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta2 * data.alpha2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta2 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta1 * data.alpha2_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta1 * data.cbeta1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta1 * data.cbeta2_beta2 + \
		(1j * float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta1_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta1_2_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta2 * data.cbeta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_2_cbeta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta1 * data.cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_cbeta2_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta2 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_2_beta1_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.calpha1_alpha2 * data.cbeta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.calpha1_alpha2 ** 2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.calpha1_beta2 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.calpha1_beta2 ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.calpha1_2_alpha2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.calpha1_2_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.alpha2_cbeta1 ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.alpha2_2_cbeta1_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.cbeta1_beta2 ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.cbeta1_2_beta2_2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha2 * data.calpha1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha2 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha2 * data.cbeta1_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha2 ** 2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha2_cbeta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_alpha2_2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_cbeta1_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_beta2 * data.alpha2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_beta2 * data.cbeta1_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_beta2 ** 2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_2_alpha2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_2_alpha2_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha1_2_beta2_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha2_cbeta1 * data.cbeta1_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha2_cbeta1 ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha2_cbeta1_2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha2_2_cbeta1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.cbeta1_beta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.cbeta1_2_beta2_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.calpha1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2 * data.cbeta1_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2 ** 2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2_cbeta1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_alpha2_2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_cbeta1_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.alpha2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_beta2 * data.cbeta1_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_beta2 ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_2_alpha2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_2_alpha2_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha1_2_beta2_2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha2_cbeta1 * data.cbeta1_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha2_cbeta1 ** 2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha2_cbeta1_2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha2_2_cbeta1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.cbeta1_beta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(-1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.cbeta1_2_beta2_2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha1 * data.alpha1_calpha2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha1 * data.beta1_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_alpha1_2_calpha2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_calpha2_beta1_2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_beta1 * data.alpha1_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha1_beta1 * data.calpha2_beta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_calpha2 * data.calpha2_alpha2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_calpha2 * data.cbeta1_beta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_calpha2 * data.cbeta2_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_calpha2_2_alpha2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_alpha2_cbeta2_2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_cbeta1 * data.alpha1_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_cbeta1 * data.calpha2_beta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_cbeta2 * data.calpha2_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_cbeta2 * data.alpha2_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.alpha1_2_cbeta1_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha2_alpha2 * data.beta1_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha2_beta1 * data.calpha2_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha2_beta1 * data.alpha2_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.calpha2_2_beta1_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.cbeta1_beta1 * data.beta1_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.cbeta1_beta1_2_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.beta1_cbeta2 * data.cbeta2_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g * data.beta1_cbeta2_2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1 * data.alpha1_calpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1 * data.alpha1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1 * data.calpha2_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1 * data.beta1_cbeta2 + \
		(1j * float(1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1_calpha2_beta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1_beta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1_2_calpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_alpha1_2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_calpha2_beta1_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta1 * data.alpha1_calpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta1 * data.alpha1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta1 * data.calpha2_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta1 * data.beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha1_beta1_2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_calpha2 * data.alpha1_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_calpha2 * data.calpha2_alpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_calpha2 * data.calpha2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_calpha2 * data.alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_calpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_calpha2 * data.cbeta2_beta2 + \
		(1j * float(1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_calpha2_alpha2_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_calpha2_cbeta1_beta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_calpha2_cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_calpha2_2_alpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_calpha2_2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_alpha2_cbeta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_cbeta1 * data.alpha1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_cbeta1 * data.calpha2_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_cbeta1 * data.beta1_cbeta2 + \
		(1j * float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_cbeta1_beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_cbeta2 * data.calpha2_alpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_cbeta2 * data.calpha2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_cbeta2 * data.alpha2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_cbeta2 * data.cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_cbeta2 * data.cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_cbeta2_2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_2_calpha2_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha1_2_cbeta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_alpha2 * data.calpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_alpha2 * data.beta1_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_alpha2_beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_cbeta1_beta1_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_beta1 * data.calpha2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_beta1 * data.alpha2_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_beta1 * data.cbeta1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_beta1 * data.cbeta2_beta2 + \
		(1j * float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_beta1_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_beta2 * data.beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_2_alpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.calpha2_2_beta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha2_beta1_cbeta2_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.alpha2_cbeta2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.cbeta1_beta1 * data.beta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.cbeta1_beta1_2_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.beta1_cbeta2 * data.cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * g ** 2 * data.beta1_cbeta2_2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.alpha1_calpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.alpha1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.calpha2_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1 * data.beta1_cbeta2 + \
		(1j * float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_calpha2_beta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_beta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_2_calpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_alpha1_2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_calpha2_beta1_2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.alpha1_calpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.alpha1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.calpha2_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1 * data.beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha1_beta1_2_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.alpha1_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.calpha2_alpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.calpha2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2 * data.cbeta2_beta2 + \
		(1j * float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_alpha2_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_cbeta1_beta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_2_alpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_calpha2_2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_alpha2_cbeta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1 * data.alpha1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1 * data.calpha2_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1 * data.beta1_cbeta2 + \
		(1j * float(1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta1_beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2 * data.calpha2_alpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2 * data.calpha2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2 * data.alpha2_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2 * data.cbeta1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2 * data.cbeta2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_cbeta2_2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_2_calpha2_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha1_2_cbeta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2 * data.calpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2 * data.beta1_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_alpha2_beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_cbeta1_beta1_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta1 * data.calpha2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta1 * data.alpha2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta1 * data.cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta1 * data.cbeta2_beta2 + \
		(1j * float(1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta1_cbeta2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_beta2 * data.beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_2_alpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.calpha2_2_beta1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_beta1_cbeta2_2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.alpha2_cbeta2 * data.beta1_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta1 * data.beta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.cbeta1_beta1_2_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.beta1_cbeta2 * data.cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) * numpy.cos(theta) * numpy.sin(theta) * data.beta1_cbeta2_2_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.alpha1_calpha2 * data.beta1_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.alpha1_calpha2 ** 2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.alpha1_cbeta2 * data.calpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.alpha1_cbeta2 ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.alpha1_2_calpha2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.alpha1_2_cbeta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.calpha2_beta1 ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.calpha2_2_beta1_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.beta1_cbeta2 ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g * data.beta1_2_cbeta2_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_calpha2 * data.alpha1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_calpha2 * data.calpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_calpha2 * data.beta1_cbeta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_calpha2 ** 2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_calpha2_beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_calpha2_2_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_beta1_cbeta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_cbeta2 * data.calpha2_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_cbeta2 * data.beta1_cbeta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_cbeta2 ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_2_calpha2_cbeta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_2_calpha2_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.alpha1_2_cbeta2_2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha2_beta1 * data.beta1_cbeta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha2_beta1 ** 2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha2_beta1_2_cbeta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.calpha2_2_beta1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.beta1_cbeta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * g ** 2 * data.beta1_2_cbeta2_2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.alpha1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.calpha2_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2 * data.beta1_cbeta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2 ** 2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2_beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_calpha2_2_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_beta1_cbeta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_cbeta2 * data.calpha2_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_cbeta2 * data.beta1_cbeta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_cbeta2 ** 2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_2_calpha2_cbeta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_2_calpha2_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.alpha1_2_cbeta2_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha2_beta1 * data.beta1_cbeta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha2_beta1 ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha2_beta1_2_cbeta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.calpha2_2_beta1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.beta1_cbeta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.exp(1j * d_theta) ** 2 * numpy.sin(theta) ** 2 * data.beta1_2_cbeta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_alpha1 * data.calpha2_alpha2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_alpha1 * data.cbeta1_beta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_alpha1 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_alpha1 ** 2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_alpha1_calpha2_alpha2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_alpha1_cbeta2_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_calpha2_beta1_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_alpha2_beta1_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_beta1 * data.alpha1_cbeta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_beta1 * data.calpha2_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_beta1 * data.alpha2_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_beta1 ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_2_alpha1_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha1_2_beta1_2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.alpha1_calpha2_cbeta1_beta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.alpha1_alpha2_cbeta1_cbeta2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.alpha1_cbeta1 * data.calpha2_beta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.alpha1_cbeta1 * data.alpha2_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.alpha1_cbeta1 ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.alpha1_2_cbeta1_2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha2_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha2_alpha2 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha2_alpha2 ** 2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha2_alpha2_cbeta1_beta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha2_beta2 * data.alpha2_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha2_beta2 ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha2_2_alpha2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.calpha2_2_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.alpha2_cbeta2 ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.alpha2_2_cbeta2_2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.cbeta1_beta1 * data.cbeta2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.cbeta1_beta1 ** 2 + \
		(float(-1) / 1) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.cbeta1_2_beta1_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.cbeta2_beta2 ** 2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g * data.cbeta2_2_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1 * data.calpha1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1 * data.alpha1_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1 * data.calpha2_alpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1 * data.calpha2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1 * data.alpha2_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1 * data.cbeta1_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1 ** 2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1_calpha2_alpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1_calpha2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1_alpha2_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1_cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha1_2_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_calpha2_alpha2_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_calpha2_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_alpha2_beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_cbeta1_beta1_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_beta1 * data.alpha1_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_beta1 * data.calpha2_alpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_beta1 * data.calpha2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_beta1 * data.alpha2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_beta1 * data.cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_beta1 * data.cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_beta1 ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_beta1_cbeta2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_2_alpha1_beta1 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_2_alpha1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha1_2_beta1_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha1_calpha2_alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha1_calpha2_cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha1_alpha2_cbeta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha1_cbeta1 * data.calpha2_alpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha1_cbeta1 * data.calpha2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha1_cbeta1 * data.alpha2_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha1_cbeta1 * data.cbeta1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha1_cbeta1 * data.cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha1_cbeta1 ** 2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha1_cbeta1_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha1_cbeta1_2_beta1 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha1_2_cbeta1_2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_alpha2 * data.calpha2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_alpha2 * data.alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_alpha2 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_alpha2 ** 2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_alpha2_cbeta1_beta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_alpha2_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_alpha2_2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_cbeta1_beta1_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_cbeta2_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_beta2 * data.alpha2_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_beta2 * data.cbeta1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_beta2 * data.cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_beta2 ** 2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_2_alpha2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_2_alpha2_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.calpha2_2_beta2_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha2_cbeta1_beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha2_cbeta2 * data.cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha2_cbeta2 * data.cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha2_cbeta2 ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha2_cbeta2_2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.alpha2_2_cbeta2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.cbeta1_beta1 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.cbeta1_beta1 ** 2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.cbeta1_2_beta1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.cbeta2_beta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * g ** 2 * data.cbeta2_2_beta2_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.calpha1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.alpha1_cbeta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.calpha2_alpha2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.calpha2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.alpha2_cbeta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.cbeta1_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1 ** 2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_calpha2_alpha2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_calpha2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_alpha2_cbeta2 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_cbeta2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha1_2_cbeta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_calpha2_alpha2_beta1 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_calpha2_beta1_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_alpha2_beta1_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_cbeta1_beta1_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.alpha1_cbeta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.calpha2_alpha2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.calpha2_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.alpha2_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.cbeta1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 * data.cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1 ** 2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_beta1_cbeta2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_2_alpha1_beta1 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_2_alpha1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha1_2_beta1_2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_calpha2_alpha2_cbeta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_calpha2_cbeta1_beta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_alpha2_cbeta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 * data.calpha2_alpha2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 * data.calpha2_beta2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 * data.alpha2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 * data.cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 * data.cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1 ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1_cbeta2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_cbeta1_2_beta1 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha1_2_cbeta1_2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2 * data.calpha2_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2 * data.alpha2_cbeta2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2 * data.cbeta1_beta1 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2 ** 2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2_cbeta1_beta1 + \
		numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2_cbeta2_beta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_alpha2_2_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_cbeta1_beta1_beta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_cbeta2_beta2_2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_beta2 * data.alpha2_cbeta2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_beta2 * data.cbeta1_beta1 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_beta2 * data.cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_beta2 ** 2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_2_alpha2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_2_alpha2_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.calpha2_2_beta2_2 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_cbeta1_beta1_cbeta2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_cbeta2 * data.cbeta1_beta1 + \
		(1j * float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_cbeta2 * data.cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_cbeta2 ** 2 + \
		(1j * float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_cbeta2_2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.alpha2_2_cbeta2_2 + \
		(float(1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta1_beta1 * data.cbeta2_beta2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta1_beta1 ** 2 + \
		(float(-1) / 2) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta1_beta1_cbeta2_beta2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta1_2_beta1_2 + \
		(float(-1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta2_beta2 ** 2 + \
		(float(1) / 4) * numpy.conj(numpy.sqrt(0.5)) ** 2 * numpy.sqrt(0.5) ** 2 * numpy.cos(theta) ** 2 * data.cbeta2_2_beta2_2)

	res = AttrDict()
	res.sw = AttrDict()
	res.se = AttrDict()
	res.bs = AttrDict()

	res.theta = numpy.arctan(2 * var_jAZ_jAX / (d2_jAZ - d2_jAX)) / 2 - numpy.pi / 2

	# Single well
	res.sw.S = 2 * d2_jAT(res.theta) / numpy.abs(exp_jAY)
	res.sw.S_pi2 = 2 * d2_jAT(res.theta + numpy.pi / 2) / numpy.abs(exp_jAY)

	# spatial entanglement
	n0 = (numpy.abs(exp_jAY) + numpy.abs(exp_jBY)) / 2

	g_optimal = lambda theta: var_jATjBT(theta) / d2_jBT(theta)
	res.se.g = g_optimal(res.theta)

	g_prime_optimal = lambda theta: -var_jATjBT(theta + numpy.pi / 2) / d2_jBT(theta + numpy.pi / 2)
	res.se.g_prime = g_prime_optimal(res.theta)

	n0_prime = numpy.abs(exp_jAY) / 2
	res.se.S_minus = d2_jAT_gjBT(res.theta, -1) / n0
	res.se.S_plus = d2_jAT_gjBT(res.theta + numpy.pi / 2, 1) / n0

	res.se.S_minus_opt = d2_jAT_gjBT(res.theta, -res.se.g) / n0_prime
	res.se.S_plus_opt = d2_jAT_gjBT(res.theta + numpy.pi / 2, res.se.g_prime) / n0_prime

	res.se.E_product = numpy.sqrt(res.se.S_minus * res.se.S_plus)
	res.se.E_EPR = numpy.sqrt(d2_jAT_gjBT(res.theta, -res.se.g) *
		d2_jAT_gjBT(res.theta + numpy.pi / 2, res.se.g_prime)) / n0_prime

	# spatial entanglement, with beam splitter
	n0 = (numpy.abs(exp_jCY) + numpy.abs(exp_jDY)) / 2

	g_optimal = lambda theta: var_jCTjDT(theta) / d2_jDT(theta)
	res.bs.g = g_optimal(res.theta)

	g_prime_optimal = lambda theta: -var_jCTjDT(theta + numpy.pi / 2) / d2_jDT(theta + numpy.pi / 2)
	res.bs.g_prime = g_prime_optimal(res.theta)

	n0_prime = numpy.abs(exp_jCY) / 2
	res.bs.S_minus = d2_jCT_gjDT(res.theta, -1) / n0
	res.bs.S_plus = d2_jCT_gjDT(res.theta + numpy.pi / 2, 1) / n0

	res.bs.S_minus_opt = d2_jCT_gjDT(res.theta, -res.bs.g) / n0_prime
	res.bs.S_plus_opt = d2_jCT_gjDT(res.theta + numpy.pi / 2, res.bs.g_prime) / n0_prime

	res.bs.E_product = numpy.sqrt(res.bs.S_minus * res.bs.S_plus)
	res.bs.E_EPR = numpy.sqrt(d2_jCT_gjDT(res.theta, -res.bs.g) *
		d2_jCT_gjDT(res.theta + numpy.pi / 2, res.bs.g_prime)) / n0_prime


	res.tau = data.t

	return res
